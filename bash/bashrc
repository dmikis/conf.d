# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
export HISTCONTROL=ignoredups
# ... and ignore same sucessive entries.
export HISTCONTROL=ignoreboth

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
# We have color support; assume it's compliant with Ecma-48
# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
# a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

# setup empty colors for warm tube terms...
color_red=
color_green=
color_yellow=
color_blue=
color_off=
if [ "$color_prompt" = yes ]; then
    color_red='\[\033[38;05;161m\]'
    color_green='\[\033[38;05;118m\]'
    color_blue='\[\033[38;05;81m\]'
    color_off='\[\033[38;05;255m\]'
fi
unset color_prompt force_color_prompt

# set aliases
if [ -f ~/.bash_aliases ]; then
   . ~/.bash_aliases
fi

# set evn vars
if [ -f ~/.bash_exports ]; then
    . ~/.bash_exports
fi

# find out some info about current git repo
function get_git_stats {
    GIT_CURRENT_BRANCH=""
    GIT_IS_DIRTY=""
    GIT_UNPUSHED_COMMITS_NUM=""

    local GIT=$(which git 2> /dev/null)
    [[ $? -ne 0 ]] && return;

    local GIT_BRANCH=$($GIT symbolic-ref HEAD 2> /dev/null)
    [[ $? -ne 0 ]] && return;

    local GIT_UNCOMMITED_FILES=$($GIT status --porcelain 2> /dev/null)
    [[ $? -ne 0 ]] && return;

    GIT_CURRENT_BRANCH=${GIT_BRANCH#refs/heads/}
    [[ -n $GIT_UNCOMMITED_FILES ]] && GIT_IS_DIRTY=true # oh, dirty, dirty git...
    GIT_UNPUSHED_COMMITS_NUM=$($GIT log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')
}

function prompt_command {
    local PS1_GIT=

    get_git_stats

    if [ ! -z $GIT_CURRENT_BRANCH ]; then
        if [ -z $GIT_IS_DIRTY ]; then
            PS1_GIT="[${color_green}${GIT_CURRENT_BRANCH}"
        else
            PS1_GIT="[${color_red}${GIT_CURRENT_BRANCH}"
        fi
        PS1_GIT="${PS1_GIT}${color_off}"
        if [ $GIT_UNPUSHED_COMMITS_NUM -gt 0 ]; then
            PS1_GIT="${PS1_GIT} ${color_red}${GIT_UNPUSHED_COMMITS_NUM}${color_off}"
        fi
        PS1_GIT="${PS1_GIT}]"
    fi

    PS1="\[\e[0m\]${color_blue}\\h${color_off}:\\w${PS1_GIT}\\$ "
}

export PROMPT_COMMAND=prompt_command
